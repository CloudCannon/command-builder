// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`outputs with empty config 1`] = `
Array [
  "echo \\"$ export JEKYLL_ENV=\\\\\\"production\\\\\\"\\"",
  "export JEKYLL_ENV=\\"production\\"",
  "if [ -d \\"undefined\\" ]; then",
  "  echo \\"$ rm -rf undefined\\"",
  "  rm -rf undefined",
  "fi",
  "USE_BUNDLE=false",
  "if [ -f /usr/local/__site/src/\\"$BUNDLE_GEMFILE\\" ]; then",
  "  echo \\"$ export BUNDLE_GEMFILE=/usr/local/__site/src/$BUNDLE_GEMFILE\\"",
  "  export BUNDLE_GEMFILE=/usr/local/__site/src/\\"$BUNDLE_GEMFILE\\"",
  "  USE_BUNDLE=true",
  "elif [ -f /usr/local/__site/src/Gemfile ]; then",
  "  USE_BUNDLE=true",
  "fi",
  "echo \\"$ source .cloudcannon/preinstall\\"",
  "if [ -f \\".cloudcannon/preinstall\\" ]; then source .cloudcannon/preinstall; else echo \\"Not found.\\"; fi",
  "echo \\"$ cd /usr/local/__site/src/\\"",
  "cd /usr/local/__site/src/",
  "if [ \\"$USE_BUNDLE\\" = true ]; then",
  "  echo \\"$ bundle version\\"",
  "  bundle version",
  "  echo \\"$ bundle config --global jobs 4\\"",
  "  bundle config --global jobs 4 && echo \\"Configured concurrent installs!\\"",
  "  echo \\"$ bundle config build.nokogiri --use-system-libraries\\"",
  "  bundle config build.nokogiri --use-system-libraries && echo \\"Configured nokogiri flag!\\"",
  "  echo \\"$ bundle install\\"",
  "  bundle install",
  "if [ -f \\"_cloudcannon-prebuild.sh\\" ]; then",
  "  echo \\"$ bash _cloudcannon-prebuild.sh\\"",
  "  echo \\"DEPRECATED: _cloudcannon-prebuild.sh should be moved to .cloudcannon/prebuild\\"",
  "  bash -l _cloudcannon-prebuild.sh",
  "fi",
  "echo \\"$ source .cloudcannon/prebuild\\"",
  "if [ -f \\".cloudcannon/prebuild\\" ]; then source .cloudcannon/prebuild; else echo \\"Not found.\\"; fi",
  "echo \\"$ cd /usr/local/__site/src/\\"",
  "cd /usr/local/__site/src/",
  "  echo \\"$ bundle exec jekyll build \\"",
  "  bundle exec jekyll build ",
  "else",
  "if [ -f \\"_cloudcannon-prebuild.sh\\" ]; then",
  "  echo \\"$ bash _cloudcannon-prebuild.sh\\"",
  "  echo \\"DEPRECATED: _cloudcannon-prebuild.sh should be moved to .cloudcannon/prebuild\\"",
  "  bash -l _cloudcannon-prebuild.sh",
  "fi",
  "echo \\"$ source .cloudcannon/prebuild\\"",
  "if [ -f \\".cloudcannon/prebuild\\" ]; then source .cloudcannon/prebuild; else echo \\"Not found.\\"; fi",
  "echo \\"$ cd /usr/local/__site/src/\\"",
  "cd /usr/local/__site/src/",
  "DETECTED_hugo_VERSION=$((hugo version 2> /dev/null || echo 'unknown') | sed 's/[][]//g' | sed 's/^hugo v//' | cut -d ' ' -f 1 | cut -d '-' -f 1)",
  "echo \\"[üè∑hugo:\${DETECTED_hugo_VERSION}]\\"",
  "DETECTED_ruby_VERSION=$((ruby -v 2> /dev/null || echo 'unknown') | sed \\"s/[][]//g\\" | sed \\"s/^ruby //g\\" | cut -d \\" \\" -f 1 | cut -d \\"p\\" -f 1)",
  "echo \\"[üè∑ruby:\${DETECTED_ruby_VERSION}]\\"",
  "DETECTED_node_VERSION=$((node -v 2> /dev/null || echo 'unknown') | sed \\"s/[][]//g\\" | sed \\"s/^v//\\")",
  "echo \\"[üè∑node:\${DETECTED_node_VERSION}]\\"",
  "DETECTED_deno_VERSION=$((deno -V 2> /dev/null || echo 'unknown') | sed \\"s/[][]//g\\" | sed \\"s/^deno //\\")",
  "echo \\"[üè∑deno:\${DETECTED_deno_VERSION}]\\"",
  "DETECTED_NPM_VERSION=$((npm -v 2> /dev/null || echo 'unknown') | sed \\"s/[][]//g\\")",
  "DETECTED_YARN_VERSION=$(yarn -v 2> /dev/null || echo 'unknown')",
  "DETECTED_BUNDLE_VERSION=$((bundle -v 2> /dev/null || echo 'unknown') | sed \\"s/[][]//g\\" | sed \\"s/^Bundler version //g\\")",
  "echo \\"[üè∑npm:\${DETECTED_NPM_VERSION}]\\"",
  "echo \\"[üè∑yarn:\${DETECTED_YARN_VERSION}]\\"",
  "echo \\"[üè∑bundler:\${DETECTED_BUNDLE_VERSION}]\\"",
  "  echo \\"$ jekyll build \\";",
  "  jekyll build ",
  "fi",
  "echo \\"$ source .cloudcannon/postbuild\\"",
  "if [ -f \\".cloudcannon/postbuild\\" ]; then source .cloudcannon/postbuild; else echo \\"Not found.\\"; fi",
  "echo \\"$ cd /usr/local/__site/src/\\"",
  "cd /usr/local/__site/src/",
  "find /usr/local/__site/compiled/ -mindepth 1 -delete",
  "shopt -s dotglob extglob",
  "__OUTPUT_DIR_CONTENT=$(ls \\"_site\\")",
  "[ -z \\"$__OUTPUT_DIR_CONTENT\\" ] || mv \\"_site\\"/!(.cloudcannon|..|.) /usr/local/__site/compiled/",
  "unset __OUTPUT_DIR_CONTENT",
  "shopt -u dotglob extglob",
  "echo \\"[‚òÅÔ∏èStart Export]\\"",
  "echo \\"{\\"",
  "echo \\"\\\\\\"syncPaths\\\\\\": \\\\\\"$SYNC_PATHS\\\\\\"\\"",
  "echo \\"}\\"",
]
`;

exports[`outputs with enable_bundle_cache or use_local_bundle 1`] = `
Array [
  "echo \\"$ export JEKYLL_ENV=\\\\\\"production\\\\\\"\\"",
  "export JEKYLL_ENV=\\"production\\"",
  "if [ -d \\"undefined\\" ]; then",
  "  echo \\"$ rm -rf undefined\\"",
  "  rm -rf undefined",
  "fi",
  "USE_BUNDLE=false",
  "if [ -f /usr/local/__site/src/\\"$BUNDLE_GEMFILE\\" ]; then",
  "  echo \\"$ export BUNDLE_GEMFILE=/usr/local/__site/src/$BUNDLE_GEMFILE\\"",
  "  export BUNDLE_GEMFILE=/usr/local/__site/src/\\"$BUNDLE_GEMFILE\\"",
  "  USE_BUNDLE=true",
  "elif [ -f /usr/local/__site/src/Gemfile ]; then",
  "  USE_BUNDLE=true",
  "fi",
  "echo \\"$ source .cloudcannon/preinstall\\"",
  "if [ -f \\".cloudcannon/preinstall\\" ]; then source .cloudcannon/preinstall; else echo \\"Not found.\\"; fi",
  "echo \\"$ cd /usr/local/__site/src/\\"",
  "cd /usr/local/__site/src/",
  "if [ \\"$USE_BUNDLE\\" = true ]; then",
  "  echo \\"$ bundle version\\"",
  "  bundle version",
  "  echo \\"$ bundle config --global jobs 4\\"",
  "  bundle config --global jobs 4 && echo \\"Configured concurrent installs!\\"",
  "  echo \\"$ bundle config build.nokogiri --use-system-libraries\\"",
  "  bundle config build.nokogiri --use-system-libraries && echo \\"Configured nokogiri flag!\\"",
  "  if [[ $DETECTED_BUNDLE_VERSION == \\"1.\\"* ]]; then",
  "    echo \\"$ bundle install --path /usr/local/__bundle\\"",
  "    bundle install --path /usr/local/__bundle",
  "  else",
  "    echo \\"$ bundle config set path /usr/local/__bundle\\"",
  "    bundle config set path /usr/local/__bundle",
  "    echo \\"$ bundle install\\"",
  "    bundle install",
  "  fi",
  "  echo \\"$ bundle clean\\"",
  "  bundle clean && echo \\"All clean!\\"",
  "if [ -f \\"_cloudcannon-prebuild.sh\\" ]; then",
  "  echo \\"$ bash _cloudcannon-prebuild.sh\\"",
  "  echo \\"DEPRECATED: _cloudcannon-prebuild.sh should be moved to .cloudcannon/prebuild\\"",
  "  bash -l _cloudcannon-prebuild.sh",
  "fi",
  "echo \\"$ source .cloudcannon/prebuild\\"",
  "if [ -f \\".cloudcannon/prebuild\\" ]; then source .cloudcannon/prebuild; else echo \\"Not found.\\"; fi",
  "echo \\"$ cd /usr/local/__site/src/\\"",
  "cd /usr/local/__site/src/",
  "  echo \\"$ bundle exec jekyll build \\"",
  "  bundle exec jekyll build ",
  "else",
  "if [ -f \\"_cloudcannon-prebuild.sh\\" ]; then",
  "  echo \\"$ bash _cloudcannon-prebuild.sh\\"",
  "  echo \\"DEPRECATED: _cloudcannon-prebuild.sh should be moved to .cloudcannon/prebuild\\"",
  "  bash -l _cloudcannon-prebuild.sh",
  "fi",
  "echo \\"$ source .cloudcannon/prebuild\\"",
  "if [ -f \\".cloudcannon/prebuild\\" ]; then source .cloudcannon/prebuild; else echo \\"Not found.\\"; fi",
  "echo \\"$ cd /usr/local/__site/src/\\"",
  "cd /usr/local/__site/src/",
  "DETECTED_hugo_VERSION=$((hugo version 2> /dev/null || echo 'unknown') | sed 's/[][]//g' | sed 's/^hugo v//' | cut -d ' ' -f 1 | cut -d '-' -f 1)",
  "echo \\"[üè∑hugo:\${DETECTED_hugo_VERSION}]\\"",
  "DETECTED_ruby_VERSION=$((ruby -v 2> /dev/null || echo 'unknown') | sed \\"s/[][]//g\\" | sed \\"s/^ruby //g\\" | cut -d \\" \\" -f 1 | cut -d \\"p\\" -f 1)",
  "echo \\"[üè∑ruby:\${DETECTED_ruby_VERSION}]\\"",
  "DETECTED_node_VERSION=$((node -v 2> /dev/null || echo 'unknown') | sed \\"s/[][]//g\\" | sed \\"s/^v//\\")",
  "echo \\"[üè∑node:\${DETECTED_node_VERSION}]\\"",
  "DETECTED_deno_VERSION=$((deno -V 2> /dev/null || echo 'unknown') | sed \\"s/[][]//g\\" | sed \\"s/^deno //\\")",
  "echo \\"[üè∑deno:\${DETECTED_deno_VERSION}]\\"",
  "DETECTED_NPM_VERSION=$((npm -v 2> /dev/null || echo 'unknown') | sed \\"s/[][]//g\\")",
  "DETECTED_YARN_VERSION=$(yarn -v 2> /dev/null || echo 'unknown')",
  "DETECTED_BUNDLE_VERSION=$((bundle -v 2> /dev/null || echo 'unknown') | sed \\"s/[][]//g\\" | sed \\"s/^Bundler version //g\\")",
  "echo \\"[üè∑npm:\${DETECTED_NPM_VERSION}]\\"",
  "echo \\"[üè∑yarn:\${DETECTED_YARN_VERSION}]\\"",
  "echo \\"[üè∑bundler:\${DETECTED_BUNDLE_VERSION}]\\"",
  "  echo \\"$ jekyll build \\";",
  "  jekyll build ",
  "fi",
  "echo \\"$ source .cloudcannon/postbuild\\"",
  "if [ -f \\".cloudcannon/postbuild\\" ]; then source .cloudcannon/postbuild; else echo \\"Not found.\\"; fi",
  "echo \\"$ cd /usr/local/__site/src/\\"",
  "cd /usr/local/__site/src/",
  "find /usr/local/__site/compiled/ -mindepth 1 -delete",
  "shopt -s dotglob extglob",
  "__OUTPUT_DIR_CONTENT=$(ls \\"_site\\")",
  "[ -z \\"$__OUTPUT_DIR_CONTENT\\" ] || mv \\"_site\\"/!(.cloudcannon|..|.) /usr/local/__site/compiled/",
  "unset __OUTPUT_DIR_CONTENT",
  "shopt -u dotglob extglob",
  "echo \\"[‚òÅÔ∏èStart Export]\\"",
  "echo \\"{\\"",
  "echo \\"\\\\\\"syncPaths\\\\\\": \\\\\\"$SYNC_PATHS\\\\\\"\\"",
  "echo \\"}\\"",
]
`;

exports[`outputs with enable_bundle_cache or use_local_bundle 2`] = `
Array [
  "echo \\"$ export JEKYLL_ENV=\\\\\\"production\\\\\\"\\"",
  "export JEKYLL_ENV=\\"production\\"",
  "if [ -d \\"undefined\\" ]; then",
  "  echo \\"$ rm -rf undefined\\"",
  "  rm -rf undefined",
  "fi",
  "USE_BUNDLE=false",
  "if [ -f /usr/local/__site/src/\\"$BUNDLE_GEMFILE\\" ]; then",
  "  echo \\"$ export BUNDLE_GEMFILE=/usr/local/__site/src/$BUNDLE_GEMFILE\\"",
  "  export BUNDLE_GEMFILE=/usr/local/__site/src/\\"$BUNDLE_GEMFILE\\"",
  "  USE_BUNDLE=true",
  "elif [ -f /usr/local/__site/src/Gemfile ]; then",
  "  USE_BUNDLE=true",
  "fi",
  "echo \\"$ source .cloudcannon/preinstall\\"",
  "if [ -f \\".cloudcannon/preinstall\\" ]; then source .cloudcannon/preinstall; else echo \\"Not found.\\"; fi",
  "echo \\"$ cd /usr/local/__site/src/\\"",
  "cd /usr/local/__site/src/",
  "if [ \\"$USE_BUNDLE\\" = true ]; then",
  "  echo \\"$ bundle version\\"",
  "  bundle version",
  "  echo \\"$ bundle config --global jobs 4\\"",
  "  bundle config --global jobs 4 && echo \\"Configured concurrent installs!\\"",
  "  echo \\"$ bundle config build.nokogiri --use-system-libraries\\"",
  "  bundle config build.nokogiri --use-system-libraries && echo \\"Configured nokogiri flag!\\"",
  "  if [[ $DETECTED_BUNDLE_VERSION == \\"1.\\"* ]]; then",
  "    echo \\"$ bundle install --path /usr/local/__bundle\\"",
  "    bundle install --path /usr/local/__bundle",
  "  else",
  "    echo \\"$ bundle config set path /usr/local/__bundle\\"",
  "    bundle config set path /usr/local/__bundle",
  "    echo \\"$ bundle install\\"",
  "    bundle install",
  "  fi",
  "  echo \\"$ bundle clean\\"",
  "  bundle clean && echo \\"All clean!\\"",
  "if [ -f \\"_cloudcannon-prebuild.sh\\" ]; then",
  "  echo \\"$ bash _cloudcannon-prebuild.sh\\"",
  "  echo \\"DEPRECATED: _cloudcannon-prebuild.sh should be moved to .cloudcannon/prebuild\\"",
  "  bash -l _cloudcannon-prebuild.sh",
  "fi",
  "echo \\"$ source .cloudcannon/prebuild\\"",
  "if [ -f \\".cloudcannon/prebuild\\" ]; then source .cloudcannon/prebuild; else echo \\"Not found.\\"; fi",
  "echo \\"$ cd /usr/local/__site/src/\\"",
  "cd /usr/local/__site/src/",
  "  echo \\"$ bundle exec jekyll build \\"",
  "  bundle exec jekyll build ",
  "else",
  "if [ -f \\"_cloudcannon-prebuild.sh\\" ]; then",
  "  echo \\"$ bash _cloudcannon-prebuild.sh\\"",
  "  echo \\"DEPRECATED: _cloudcannon-prebuild.sh should be moved to .cloudcannon/prebuild\\"",
  "  bash -l _cloudcannon-prebuild.sh",
  "fi",
  "echo \\"$ source .cloudcannon/prebuild\\"",
  "if [ -f \\".cloudcannon/prebuild\\" ]; then source .cloudcannon/prebuild; else echo \\"Not found.\\"; fi",
  "echo \\"$ cd /usr/local/__site/src/\\"",
  "cd /usr/local/__site/src/",
  "DETECTED_hugo_VERSION=$((hugo version 2> /dev/null || echo 'unknown') | sed 's/[][]//g' | sed 's/^hugo v//' | cut -d ' ' -f 1 | cut -d '-' -f 1)",
  "echo \\"[üè∑hugo:\${DETECTED_hugo_VERSION}]\\"",
  "DETECTED_ruby_VERSION=$((ruby -v 2> /dev/null || echo 'unknown') | sed \\"s/[][]//g\\" | sed \\"s/^ruby //g\\" | cut -d \\" \\" -f 1 | cut -d \\"p\\" -f 1)",
  "echo \\"[üè∑ruby:\${DETECTED_ruby_VERSION}]\\"",
  "DETECTED_node_VERSION=$((node -v 2> /dev/null || echo 'unknown') | sed \\"s/[][]//g\\" | sed \\"s/^v//\\")",
  "echo \\"[üè∑node:\${DETECTED_node_VERSION}]\\"",
  "DETECTED_deno_VERSION=$((deno -V 2> /dev/null || echo 'unknown') | sed \\"s/[][]//g\\" | sed \\"s/^deno //\\")",
  "echo \\"[üè∑deno:\${DETECTED_deno_VERSION}]\\"",
  "DETECTED_NPM_VERSION=$((npm -v 2> /dev/null || echo 'unknown') | sed \\"s/[][]//g\\")",
  "DETECTED_YARN_VERSION=$(yarn -v 2> /dev/null || echo 'unknown')",
  "DETECTED_BUNDLE_VERSION=$((bundle -v 2> /dev/null || echo 'unknown') | sed \\"s/[][]//g\\" | sed \\"s/^Bundler version //g\\")",
  "echo \\"[üè∑npm:\${DETECTED_NPM_VERSION}]\\"",
  "echo \\"[üè∑yarn:\${DETECTED_YARN_VERSION}]\\"",
  "echo \\"[üè∑bundler:\${DETECTED_BUNDLE_VERSION}]\\"",
  "  echo \\"$ jekyll build \\";",
  "  jekyll build ",
  "fi",
  "echo \\"$ source .cloudcannon/postbuild\\"",
  "if [ -f \\".cloudcannon/postbuild\\" ]; then source .cloudcannon/postbuild; else echo \\"Not found.\\"; fi",
  "echo \\"$ cd /usr/local/__site/src/\\"",
  "cd /usr/local/__site/src/",
  "find /usr/local/__site/compiled/ -mindepth 1 -delete",
  "shopt -s dotglob extglob",
  "__OUTPUT_DIR_CONTENT=$(ls \\"_site\\")",
  "[ -z \\"$__OUTPUT_DIR_CONTENT\\" ] || mv \\"_site\\"/!(.cloudcannon|..|.) /usr/local/__site/compiled/",
  "unset __OUTPUT_DIR_CONTENT",
  "shopt -u dotglob extglob",
  "echo \\"[‚òÅÔ∏èStart Export]\\"",
  "echo \\"{\\"",
  "echo \\"\\\\\\"syncPaths\\\\\\": \\\\\\"$SYNC_PATHS\\\\\\"\\"",
  "echo \\"}\\"",
]
`;
